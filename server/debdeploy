#! /usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import json
import logging
import os
import pydoc
import sys
import textwrap

from collections import defaultdict

import cumin

from cumin import query, transport, transports

from debdeploy_conf import *
from debdeploy_updatespec import *


if os.geteuid() != 0:
    print("debdeploy needs to be run as root")
    sys.exit(1)

cumin_config = cumin.Config()
conf = DebDeployConfig("/etc/debdeploy.conf")

logging_level = logging.INFO
if conf.debug:
    logging_level = logging.DEBUG

logging.basicConfig(filename='/var/log/debdeploy/debdeploy.log',
                    format='%(levelname)s: %(asctime)s : %(funcName)s : %(message)s',
                    level=logging_level)


def show_unreachable_hosts(worker):
    unreachable_hosts = []
    for node in worker._handler_instance.nodes.values():
        if node.state.is_failed:
            unreachable_hosts.append(node.name)

    if unreachable_hosts:
        print("\nThe following hosts were unreachable:")
        for host in unreachable_hosts:
            print(host)


def run_cumin(cmd, alias):
    '''
    Run Cumin and discard the output shown by the transport

    cmd   : The Command to be executed
    alias : A Cumin alias for a group of servers
    '''

    with open(os.devnull, 'w') as discard_output:

        try:
            oldstdout = sys.stdout
            oldstderr = sys.stderr
            sys.stdout = discard_output
            sys.stderr = discard_output

            hosts = query.Query(cumin_config).execute('A:' + alias)
            target = transports.Target(hosts, batch_size=100)
            worker = transport.Transport.new(cumin_config, target)
            worker.commands = [cmd]

            worker.handler = 'sync'
            worker.success_threshold = 0.9
            exit_code = worker.execute()

            return worker

        except cumin.backends.InvalidQueryError as e:
            print("Invalid query:")
            print(e)
            sys.exit(1)
        finally:
            sys.stdout = oldstdout
            sys.stderr = oldstderr


def deploy_update(source, update_type, update_file, servergroup, supported_distros, fixes, downgrade=False):
    '''
    Initiate a deployment.

    source      : Name of the source package (string)
    update_type : Various types of packages have different outcome, see doc/readme.txt (string)
    update_file : Filename of update specification (string)
    servergroup : The name of the server group (string)
    '''

    update_desc = {}
    update_desc["tool"] = "Non-daemon update, no service restart needed"
    update_desc["daemon-direct"] = "Daemon update without user impact"
    update_desc["daemon-disrupt"] = "Daemon update with service availability impact"
    update_desc["library"] = "Library update, several services might need to be restarted"

    print("Rolling out {}:".format(source))
    print(update_desc[update_type])
    print()

    cmd = '/usr/bin/debdeploy-deploy --source ' + source + ' --updatespec '
    for distro in fixes:
        if fixes[distro]:
            cmd += str(supported_distros[distro][0][0]) + "_" + str(supported_distros[distro][0][1]) + "_" + str(fixes[distro]) + " "

    if downgrade:
        cmd += " --downgrade"

    worker = run_cumin(cmd, servergroup)

    status_print = textwrap.TextWrapper(initial_indent='  ')
    for nodeset, output in worker.get_results():
        msg = output.message().decode('utf-8')
        try:
            result = json.loads(msg)

            status_codes = {"NOCHANGE": "These hosts are already up-to-date:",
                            "OSDIFFERS": "The update spec doesn't apply to the OS of the following hosts:",
                            "NOBINARY": "The package to be updated isn't installed on these hosts:",
                            "INVALID_DISTRO": "Found an unsupported distro:"}

            if result['status'] in status_codes:
                print(status_codes[result['status']])
                print(status_print.fill(str(nodeset) + " (" + str(len(nodeset)) + " hosts)"))
                print()
            elif result['success'] and result['status'] == 'UPDATES':
                updates = result['data']
                for package in updates.keys():
                    print("{} was updated: {} -> {}".format(
                        package, updates[package][0], updates[package][1]))
                    print(status_print.fill(str(nodeset) + " (" + str(len(nodeset)) + " hosts)"))
                    print()
            else:
                if result['success']:
                    print("Unspecified return code:")
                else:
                    print("Unspecified error:")
                print(result['status'])

        except ValueError as e:
            print("Could not decode JSON response for")
            print(nodeset)
            print(e)

        except KeyError as e:
            print("Failed to read expected value {}:".format(e))
            print(nodeset)

    show_unreachable_hosts(worker)


def detect_restarts(libnames, servergroup, printall):
    '''
    Query for necessary restarts after a library or interpreter upgrade

    libnames    : A list of library base names, e.g. libssl for
                  /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0 (list of strings)
    servergroup : The name of the server group for which process restarts should be queried (string)
    printall    : If some services are automatically restarted in an environment, these restarts
                  can be automatically filtered by the Debdeploy client. This is enabled by default.
                  In some cases (e.g. to verify whether the automatic restart works fine) it may
                  be useful to still display the full list of pending restarts. This is option
                  is passed, no filtering takes place (boolean)
    '''

    cmd = '/usr/bin/debdeploy-restarts --libname ' + ' '.join(libnames)

    if printall:
        cmd += ' --printall'

    worker = run_cumin(cmd, servergroup)

    restarts_per_lib = defaultdict(lambda: defaultdict(cumin.NodeSet))
    for nodeset, output in worker.get_results():
        msg = output.message().decode('utf-8')

        try:
            result = json.loads(msg)
            if result['success']:
                if result['status'] == 'RESTARTS':
                    restarts = result['data']
                    for library, programs in restarts.items():
                        for program in programs:
                            restarts_per_lib[library][program] |= nodeset

                elif result['status'] == 'NO_RESTARTS_NEEDED':
                    print("No service needs a restart" + " (" + str(len(nodeset)) + " hosts)\n")

        except ValueError as e:
            print("Could not decode JSON response for")
            print(nodeset)
            print(e)

    for lib in restarts_per_lib:
        print("Restarts for {}:".format(lib))
        for program in restarts_per_lib[lib]:
            print("  " + program)
            print("      " + str(restarts_per_lib[lib][program]) + " (" + str(len(restarts_per_lib[lib][program])) + " hosts)")

    show_unreachable_hosts(worker)


def detect_rev_deps(pkgnames, servergroup):
    '''
    Query for reverse dependencies of packages(s)

    pkgnames    : A list of package names for which reverse dependencies are displayed,
                  e.g. libssl1.1 (list of strings)
    servergroup : The name of the server group for which process reverse dependencies should be queried (string)
    '''

    cmd = '/usr/bin/debdeploy-revdeps ' + ' '.join(pkgnames)

    worker = run_cumin(cmd, servergroup)

    status_print = textwrap.TextWrapper(initial_indent='  ')
    for nodeset, output in worker.get_results():
        msg = output.message().decode('utf-8')

        try:
            result = json.loads(msg)
            if result['success']:
                if result['status'] == 'LIST_DEPS':
                    if result['data']:
                        print(nodeset)
                        for service in result['data']:
                            print(status_print.fill(service))
                    else:
                        print(nodeset)
                        print(status_print.fill("No reverse dependencies installed"))
            else:
                error_codes = {"QUERY_FAIL": "Failed to query reverse dependencies:",
                               "INVALID_PACKAGE": "Unknown package:"}

                if result['status'] in error_codes:
                    print(error_codes[result['status']])
                    print(status_print.fill(str(nodeset)))

        except ValueError as e:
            print("Could not decode JSON response for")
            print(nodeset)
            print(e)

        except KeyError as e:
            print("Failed to read expected value {}:".format(e))
            print(nodeset)

    show_unreachable_hosts(worker)


def detect_package_versions(pkgnames, servergroup):
    '''
    Query for installed version(s) of package(s)

    pkgnames    : A list of package names for which the installed version is queried e.g. libc6 (list of strings)
    servergroup : The name of the server group for which process restarts should be queried (string)
    '''

    cmd = '/usr/bin/debdeploy-pkgversion ' + ' '.join(pkgnames)

    worker = run_cumin(cmd, servergroup)

    status_print = textwrap.TextWrapper(initial_indent='  ')
    for nodeset, output in worker.get_results():
        msg = output.message().decode('utf-8')

        try:
            result = json.loads(msg)
            if result['success']:
                if result['status'] == 'LIST_PKG_VERSIONS':
                    if result['data']:
                        for package in result['data']:
                            print(nodeset)
                            print(status_print.fill(package + ": " + result['data'][package]))
                    else:
                        print(nodeset)
                        print(status_print.fill("Package(s) not installed"))

        except ValueError as e:
            print("Could not decode JSON response for")
            print(nodeset)
            print(e)

        except KeyError as e:
            print("Failed to read expected value {}:".format(e))
            print(nodeset)

    show_unreachable_hosts(worker)


def main():
    p = argparse.ArgumentParser()

    p.add_argument("--verbose", action="store_true", dest="verbose",
                   help="Enable verbose output, e.g. show full apt output in status-deploy and \
                   status-rollback")

    subp = p.add_subparsers(title='Command', description='Valid commands', dest='command')
    subp.required = True
    parser_deps = subp.add_parser('query_deps', help='Query reverse dependencies of a given package')
    parser_deps.add_argument('--packages', action='store', nargs='+',
                             help="Packages to query reverse dependencies", required=True)
    parser_deps.add_argument("-s", "--servers", action="store", type=str, dest="serverlist",
                             help="The group of servers for which reverse dependencies should be queried",
                             required=True)

    parser_deploy = subp.add_parser('deploy', help='Install a software update')
    parser_deploy.add_argument("-s", "--servers", action="store", type=str, dest="serverlist",
                               help="The group of servers on which the update should be applied",
                               required=True)
    parser_deploy.add_argument("-u", "--update", action="store", type=str, dest="updatefile",
                               help="A YAML file containing the update specification (which source package to \
                               update and the respective fixed versions", required=True)

    parser_restart = subp.add_parser('query_restart', help='Query necesssary service restarts after library update')
    parser_restart.add_argument("-s", "--servers", action="store", type=str, dest="serverlist",
                                help="The group of servers for which necessary service restarts should be detected",
                                required=True)
    parser_restart.add_argument("--printall", action="store_true",
                                help="If some services are automatically restarted in an environment, these \
                                restarts can be automatically filtered by the Debdeploy client. This is \
                                enabled by default. In some cases (e.g. to verify whether the automatic \
                                restart works fine) it may be useful to still display the full list of \
                                pending restarts. This is option is enabled, no filtering takes place")
    parser_restart.add_argument("-u", "--update", action="store", type=str, dest="updatefile",
                                help="A YAML file containing the update specification (which source package to \
                                update and the respective fixed versions", required=True)

    parser_deploy_restart = subp.add_parser('deploy_restartcheck', help='Deploy a library update and query necesssary service restarts after library update')
    parser_deploy_restart.add_argument("-s", "--servers", action="store", type=str, dest="serverlist",
                                       help="The group of servers for which necessary service restarts should be detected",
                                       required=True)
    parser_deploy_restart.add_argument("--printall", action="store_true",
                                       help="If some services are automatically restarted in an environment, these \
                                       restarts can be automatically filtered by the Debdeploy client. This is \
                                       enabled by default. In some cases (e.g. to verify whether the automatic \
                                       restart works fine) it may be useful to still display the full list of \
                                       pending restarts. This is option is enabled, no filtering takes place")
    parser_deploy_restart.add_argument("-u", "--update", action="store", type=str, dest="updatefile",
                                       help="A YAML file containing the update specification (which source package to \
                                       update and the respective fixed versions", required=True)

    parser_version = subp.add_parser('query_version', help='Query the installed versions of packages')
    parser_version.add_argument("-s", "--servers", action="store", type=str, dest="serverlist",
                                help="The group of servers for which installed package versions should be queried",
                                required=True)
    parser_version.add_argument('--packages', action='store', nargs='+',
                                help="Packages to query installed versions", required=True)

    opt = p.parse_args()

    if opt.serverlist:
        if opt.serverlist not in cumin_config['aliases']:
            print("Invalid host group alias")
            sys.exit(1)

    if opt.command == "deploy":
        update = DebDeployUpdateSpec(opt.updatefile, conf.supported_distros)
        deploy_update(update.source, update.update_type, opt.updatefile, opt.serverlist,
                      conf.supported_distros, update.fixes, update.downgrade)

    elif opt.command == "query_restart":
        update = DebDeployUpdateSpec(opt.updatefile, conf.supported_distros)
        if update.update_type != 'library':
            print("%s isn't a library" % update.source)
        else:
            detect_restarts(update.libraries, opt.serverlist, opt.printall)

    elif opt.command == "deploy_restartcheck":
        update = DebDeployUpdateSpec(opt.updatefile, conf.supported_distros)
        if update.update_type != 'library':
            print("%s isn't a library" % update.source)
        else:
            deploy_update(update.source, update.update_type, opt.updatefile, opt.serverlist,
                          conf.supported_distros, update.fixes, update.downgrade)
            detect_restarts(update.libraries, opt.serverlist, opt.printall)

    elif opt.command == "query_deps":
        detect_rev_deps(opt.packages, opt.serverlist)

    elif opt.command == "query_version":
        detect_package_versions(opt.packages, opt.serverlist)


if __name__ == '__main__':
    main()


# Local variables:
# mode: python
# End:
