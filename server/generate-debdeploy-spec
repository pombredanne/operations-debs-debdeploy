#! /usr/bin/python3
# -*- coding: utf-8 -*-
"""This is a small script for generating spec files used by `depdeploy`"""

import datetime
import os
import re
import readline

from argparse import ArgumentParser, RawDescriptionHelpFormatter

import yaml

from debdeploy_conf import DebDeployConfig

__title__ = "Generate debdeploy specs"
UPDATE_TYPES = ('tool', 'daemon-direct', 'daemon-disrupt', 'reboot', 'library')
UPDATE_TYPE_HELP = """
tool           -> The updated packages is an enduser tool, can be
                  rolled-out immediately.
daemon-direct  -> Daemons which are restarted during update, but which
                  do no affect existing users.
daemon-disrupt -> Daemons which are restarted during update, where the
                  users notice an impact. The update procedure is almost
                  identical, but displays additional warnings
library        -> After a library is updated, programs may need to be
                  restarted to fully effect the change. In addition
                  to libs, some applications may also fall under this rule,
                  e.g. when updating QEMU, you might need to restart VMs.
"""
LIBRARY_HELP = """
You can specify an optional comma-separated list of one or more library
base names. These are used to detect necessary library restarts after
an upgrade of a library'
E.g. for openssl, these would be 'libssl' and 'libcrypto'"""
CHANGED_BIN_HELP = """
Usually every upgrade only modifies existing package names. There are rare exceptions
e.g. if a rebase to a new upstream release is necessary.
"""
TRANSITION_HELP = """
Is {cur_pkgname} a package which can be removed once it has been replaced by {new_pkgname}?
If the old package should be removed, type "y" otherwise it will remain installed
This is useful if e.g. a program builds a library for internal use only
"""


def get_args():
    """Return parsed argument object"""
    parser = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('-C', '--config', default='/etc/debdeploy.conf',
                        help='The config file to use.  default: %(default)s')
    parser.add_argument('-c', '--comment')
    parser.add_argument('-U', '--update-type', choices=UPDATE_TYPES)
    parser.add_argument('source', nargs='?')
    parser.add_argument('-v', '--verbose', action='count')
    return parser.parse_args()


def ask_question(message, allow_exit=True, valid_choices=None, exit_options=('', 'quit')):
    """Ask the user a question and return the answer

    Arguments:
        message (str): The question to ask the user
        allow_exit (bool, optional): If true an answer matching `exit_options` will exit the
            program. Default: True
        valid_choices (str, list, callable): Either a string, list or callable used to
            validate answers.  As a string of list it just compares the answer matches or
            is contained in the list.  If a callable is passed it must take an answer as
            a argument and return a tuple (Boolean, str) the first indicating if the answer
            is valid, the second an error message if it is not
    """
    answer = ''
    exit_msg = ''
    valid_choices = [valid_choices] if isinstance(valid_choices, str) else valid_choices

    if allow_exit:
        exit_msg = " type '{exit}' to abort\n>".format(exit="' or '".join(exit_options))

    if valid_choices is None:
        answer = input(message + exit_msg).strip()
    else:
        if callable(valid_choices):
            valid = False
            while not valid:
                readline.set_startup_hook(lambda pkg=answer: readline.insert_text(answer))
                answer = input(message + exit_msg).strip()
                valid, error_message = valid_choices(answer)
                if not valid:
                    print(error_message)
        elif not isinstance(valid_choices, list) and not isinstance(valid_choices, tuple):
            raise ValueError('valid_choices must be a list, tuple, str or callable. not {}'.format(
                type(valid_choices)))
        else:
            while answer not in valid_choices:
                readline.set_startup_hook(lambda pkg=answer: readline.insert_text(answer))
                answer = input(message + exit_msg).strip()
                if answer not in valid_choices:
                    print('update type must be one of {}'.format(valid_choices))

    if answer in exit_options and allow_exit:
        print("Aborting")
        raise SystemExit(1)
    readline.set_startup_hook(None)
    return answer


def get_filename(source):
    """Get a unique filename"""
    datetime_stamp = datetime.datetime.now().strftime("%Y-%m-%d")
    file_name = '{}-{}.yaml'.format(datetime_stamp, source)
    if os.path.exists(file_name):
        print('{file_name}: already exists. please update manually, or remove and start again'.format(
            file_name=file_name))
        raise SystemExit(1)
    return file_name


def validate_pkg_version(pkg_version):
    """ensure a version number looks like a valid debian version"""
    # https://salsa.debian.org/python-debian-team/python-debian/blob/master/lib/debian/debian_support.py#L121-124
    re_valid_version = re.compile(
        r"^((?P<epoch>\d+):)?"
        "(?P<upstream_version>[A-Za-z0-9.+:~-]+?)"
        "(-(?P<debian_revision>[A-Za-z0-9+.~]+))?$")
    match = re_valid_version.match(pkg_version)
    if match is None:
        return (False, 'Invalid version {pkg_version}, please correct:'.format(
            pkg_version=pkg_version))
    return (True, '')


def get_transitions(changed_binary_names):
    """Return a dictionary of transitions and the required action"""
    question_msg = ('Enter the name of the binary package which will replace'
                    '{cur_pkgname} (leave blank to skip) \n>')
    transitions = {}
    for cur_pkgname in changed_binary_names:
        cur_pkgname = cur_pkgname.strip()
        readline.set_startup_hook(lambda pkg=cur_pkgname: readline.insert_text(pkg))
        new_pkgname = ask_question(
            question_msg.format(cur_pkgname=cur_pkgname),
            allow_exit=False)
        if cur_pkgname == new_pkgname:
            print("Package name remains the same, skipping")
            continue
        print(TRANSITION_HELP.format(cur_pkgname=cur_pkgname, new_pkgname=new_pkgname))
        replacement = 'keep'
        readline.set_startup_hook(lambda: readline.insert_text("y"))
        if input('>').strip().lower() == 'y':
            replacement = 'delete'
        transitions[cur_pkgname] = {'new_name': new_pkgname, 'action': replacement}
    readline.set_startup_hook(None)
    return transitions


def main():
    """The main function"""
    source_msg = 'Please enter the name of source package (e.g. openssl).'
    comment_msg = ('Enter an optional comment, e.g. a reference to a '
                   'security advisory or a CVE ID mapping\n>')
    updatetype_msg = 'Please enter the update type:\n>'
    library_msg = 'Please enter the name of one or several libraries. Leave blank to skip \n>'
    changed_bin_msg = ('Enter an optional comma-separated list of binary package names\n'
                       'which are being switched to a new name.\n'
                       'Leave blank to skip\n>')

    args = get_args()
    conf = DebDeployConfig(args.config)
    spec = {}
    spec['fixes'] = {}
    spec['transitions'] = {}
    spec['libraries'] = []
    spec['source'] = args.source if args.source else ask_question(source_msg)
    file_name = get_filename(spec['source'])
    spec['comment'] = args.comment if args.comment else ask_question(
        comment_msg, allow_exit=False)

    print(UPDATE_TYPE_HELP)
    spec['updatetype'] = args.update_type if args.update_type else ask_question(
        updatetype_msg, allow_exit=False, valid_choices=UPDATE_TYPES)

    for distro in conf.supported_distros:
        msg = ('Please enter the version of {source} fixed in {distro}. '
               'Leave blank if no fix is available/required for a {distro}.\n>'
               ).format(source=spec['source'], distro=distro)
        spec['fixes'][distro] = ask_question(msg,
                                             allow_exit=False,
                                             valid_choices=validate_pkg_version)

    if not any(spec['fixes'].values()):
        print("At least one fixed version needs to be configured, aborting")
        raise SystemExit(1)

    if spec['updatetype'] == 'library':
        print(LIBRARY_HELP)
        libinput = ''
        if conf.library_hints.get(spec['source'], None):
            readline.set_startup_hook(
                lambda: readline.insert_text(",".join(conf.library_hints[spec['source']])))

        libinput = ask_question(library_msg, allow_exit=False)
        spec['libraries'] = [i.strip() for i in libinput.split(',')] if libinput else []

    print(CHANGED_BIN_HELP)

    changed_binary_names = ask_question(changed_bin_msg, allow_exit=False)
    if changed_binary_names:
        spec['transitions'] = get_transisions(changed_binary_names.split())

    try:
        with open(file_name, "w") as yaml_file:
            yaml.dump(spec, yaml_file, default_flow_style=False)
    except IOError as error:
        print("Error: {}".format(error))
        raise SystemExit(1)


if __name__ == '__main__':
    main()


# Local variables:
# mode: python
# End:
