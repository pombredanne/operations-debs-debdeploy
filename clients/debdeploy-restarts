#! /usr/bin/python3
# -*- coding: utf-8 -*-
'''
Module for listing necessary service restarts after a library update (used by "query_restart" command)
'''

import subprocess
import os
import sys
import argparse
import json
import collections
import logging
from logging.handlers import RotatingFileHandler
from psutil import Process, NoSuchProcess

logger = logging.getLogger('debdeploy')
CONF_FILE = '/etc/debdeploy-client/autorestarts.conf'


def parse_args():
    p = argparse.ArgumentParser(
        description='debdeploy-restarts - List necessary restarts after library update (used by "query_restart" command)')
    p.add_argument('--printall', action='store_true',
                   help='Services which are automatically restarted are not shown by default.'
                   'Enabling this option displays them nonetheless')
    p.add_argument('--console', action='store_true', default=False,
                   help='Enable additional console output')
    p.add_argument('--libname', action='store', nargs='+', required=True)

    args = p.parse_args(sys.argv[1:])

    return args


def setup_logger(verbose=False, console_output=False):
    log_file = "/var/log/debdeploy/updates.log"

    log_path = os.path.dirname(log_file)
    if not os.path.exists(log_path):
        os.makedirs(log_path, 0o770)

    log_formatter = logging.Formatter(fmt='%(asctime)s (%(levelname)s) %(message)s')
    log_handler = RotatingFileHandler(log_file, maxBytes=(5 * (1024**2)), backupCount=30)
    log_handler.setFormatter(log_formatter)
    logger.addHandler(log_handler)
    logger.raiseExceptions = False

    if console_output:
        console = logging.StreamHandler()
        logging.getLogger('debdeploy').addHandler(console)

    if verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)


def get_deleted_files():
    '''
    This function returns a list open file handles, which have a reference to deleted
    files, this usually occurs after library upgrades. The original code in debdepoy
    was parsing /proc itself, but we now rely on parsing the lsof which is much more
    robust since it allows to directly query deleted filed
    '''

    deleted_files = []
    false_positives = ['/dev/zero']

    try:
        del_files = subprocess.check_output(["lsof", "+c", "15", "-nXd", "DEL"],
                                            universal_newlines=True)
    except subprocess.CalledProcessError as e:
        logger.info("Could not determine host architecture: %s", e.returncode)
        sys.exit(1)

    for line in del_files.splitlines():
        cols = line.split()
        try:
            if len(cols) == 8:
                command, pid, filename = [cols[x] for x in (0, 1, 7)]
                if filename not in false_positives:
                    deleted_files.append((command, pid, filename))
        except ValueError:
            continue

    return deleted_files


def result(success, status, restarts_needed):
    '''
    Generates a JSON data set to return to Cumin.
    success: Did an error occur or not? (boolean)
    status: Status code (string)
    restarts_needed: dictionary of process names with a dictionary
        of PIDs with a list of file references
    '''

    data = collections.OrderedDict()
    data['success'] = success
    data['status'] = status
    data['data'] = restarts_needed

    return json.dumps(data)


def service_to_pids(service):
    """given a service name return the PID and all Child PID's"""
    pids = []
    try:
        pid_query = subprocess.check_output(
            ['/bin/systemctl', 'show', '-p', 'MainPID', service],
            universal_newlines=True)
    except subprocess.CalledProcessError as error:
        logger.info("Could not query the PID of %s: %s", service, error.returncode)
        return pids
    main_pid = int(pid_query.split('=')[1])
    if main_pid == 0:
        # Service using legacy init script and systemd-sysv-generator
        # try to use pidof
        try:
            pids = subprocess.check_output(
                ['/bin/pidof', service], universal_newlines=True).split()
            return pids
        except subprocess.CalledProcessError:
            logger.warning("unable to determine pid for: %s", service)
            return pids
    try:
        parent = Process(main_pid)
    except NoSuchProcess:
        logger.info('PID %s is not active', main_pid)
        return pids
    pids.append(main_pid)
    for child in parent.children(recursive=True):
        pids.append(child.pid)
    return pids


def main():
    '''
    Updates all installed binary packages of the source package
    to the specified version.
    '''
    args = parse_args()

    setup_logger(False, args.console)

    deleted_files = get_deleted_files()
    restarts_needed = collections.defaultdict(set)
    return_restarts = {}
    auto_restarts_pids = []

    if not args.printall:
        with open(CONF_FILE, 'r') as config:
            for service in config.readlines():
                auto_restarts_pids += service_to_pids(service.strip())

    for i in deleted_files:
        procname, pid, fname = (i)
        for libname in args.libname:
            if fname.find(libname) != -1:
                if int(pid) not in auto_restarts_pids:
                    restarts_needed[fname].add(procname)

    for i in restarts_needed.keys():
        return_restarts[i] = list(restarts_needed[i])

    if len(restarts_needed) == 0:
        return result(True, "NO_RESTARTS_NEEDED", {})
    else:
        logger.info("These services need a restart:")
        for i in restarts_needed:
            logger.info(i + " (" + str(len(restarts_needed)) + " processes)")
        return result(True, "RESTARTS", return_restarts)


if __name__ == '__main__':
    print(main())

# Local variables:
# mode: python
# End:
